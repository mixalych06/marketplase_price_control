from aiogram import types
from create_bot import db
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.admin_keyboards import keyword_root_user, keyword_admin
from keyboards.user_keyboards import keyword

import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv(filename='.env'), encoding="utf-8", override=True)
ROOT_U = os.environ.get('ROOT_USER')


class FSMRoot(StatesGroup):
    id_admin = State()
    del_id_admin = State()
    id_vip = State()
    del_vip = State()


'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞'''
'''**************************************************************************'''


async def cm_start(message: types.Message):
    await FSMRoot.id_admin.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ id')


async def load_id(message: types.Message, state: FSMContext):
    if db.su_user_exists(int(message.text)):
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        await state.finish()
    else:
        async with state.proxy() as data:
            data['id_admin'] = message.text
        db.add_su_user(int(data['id_admin']))
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["id_admin"]} –¥–æ–±–∞–≤–ª–µ–Ω.')
        await state.finish()


'''**************************************************************************'''

'''–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞'''
'''**************************************************************************'''


async def cm_del(message: types.Message):
    await FSMRoot.del_id_admin.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')


async def del_id_admin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id_admin'] = message.text
    db.del_su_user_bd(int(data['id_admin']))
    await message.answer(f'–∞–¥–º–∏–Ω –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["id_admin"]} —É–¥–∞–ª—ë–Ω.')
    await state.finish()


'''**************************************************************************'''

'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
'''**************************************************************************'''


async def cm_start_vip(message: types.Message):
    await FSMRoot.id_vip.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ id_vip')


async def load_id_vip111(message: types.Message, state: FSMContext):
    if db.vip_user_exists(int(message.text)):
        await message.answer(f'–£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.text} —É–∂–µ –µ—Å—Ç—å vip .')
        await state.finish()
    else:
        async with state.proxy() as data:
            data['vip_user_id'] = message.text
        db.add_vip_user(int(data['vip_user_id']), 50)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data["vip_user_id"]} –¥–æ–±–∞–≤–ª–µ–Ω VIP.')
        await message.bot.send_message(data["vip_user_id"], f'ü§ñ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!ü§©\n–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω üíéVIPüíé —Å—Ç–∞—Ç—É—Å.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å\n'
                                                            f'<b>–¥–æ 50 —Å—Å—ã–ª–æ–∫</b> '
                                                            f'–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æüëè', parse_mode='HTML')
        await state.finish()


async def vip_del(message: types.Message):
    await FSMRoot.del_vip.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è vip')


async def del_id_vip(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vip_user_id'] = message.text
    db.del_vip_user_bd(int(data['vip_user_id']))
    await message.answer(f'vip –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["vip_user_id"]} —É–¥–∞–ª—ë–Ω.')
    await state.finish()


'''**************************************************************************'''


async def command_start_admin(message: types.Message):
    if message.from_user.id == int(ROOT_U):
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –°–æ–∑–¥–∞—Ç–µ–ª—å!', reply_markup=keyword_root_user)
        return
    elif db.su_user_exists(message.from_user.id):
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞', reply_markup=keyword_admin)
        return
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', reply_markup=keyword)


async def user_id(message: types.Message):
    await message.answer(f'–í–∞—à ID: {message.from_user.id}')


async def command_how_many_users(message: types.Message):
    if message.from_user.id == int(ROOT_U):
        await message.answer(f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.select_users())}\n'
                             f'–ù–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.select_off_users())}\n'
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π c VIP: {len(db.vip_user_db())}')
        return
    elif db.su_user_exists(message.from_user.id):
        await message.answer(f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.select_users())}\n'
                             f'–ù–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.select_off_users())}\n'
                             f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π c VIP: {len(db.vip_user_db())}')
        return

    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', reply_markup=keyword)


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(cm_start, text=['–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'], state=None)
    dp.register_message_handler(load_id, state=FSMRoot.id_admin)

    dp.register_message_handler(cm_del, text=['–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'], state=None)
    dp.register_message_handler(del_id_admin, state=FSMRoot.del_id_admin)

    dp.register_message_handler(cm_start_vip, text=['–î–æ–±–∞–≤–∏—Ç—å VIP'], state=None)
    dp.register_message_handler(load_id_vip111, state=FSMRoot.id_vip)

    dp.register_message_handler(vip_del, text=['–£–¥–∞–ª–∏—Ç—å VIP'], state=None)
    dp.register_message_handler(del_id_vip, state=FSMRoot.del_vip)

    dp.register_message_handler(command_start_admin, commands=['start_admin'])
    dp.register_message_handler(command_how_many_users, text=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ'])
    dp.register_message_handler(user_id, commands=['user_ID'])
