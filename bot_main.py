import aiogram.utils.exceptions
#from aiogram.utils.exceptions import BotBlocked

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions
from pars_wildberris import all_pars, parsing_evry_day
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from random import choice
from data.bd import DataBase
from time import sleep
import os
from dotenv import load_dotenv, find_dotenv

#sdd_db()
load_dotenv(find_dotenv())

bot: Bot = Bot(os.getenv('TOKEN'))
dp: Dispatcher = Dispatcher(bot)
keyword: ReplyKeyboardMarkup = ReplyKeyboardMarkup(resize_keyboard=True)


db = DataBase('data/database.db')
button_user_link: KeyboardButton = KeyboardButton('üõç–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')
button_help: KeyboardButton = KeyboardButton('üÜò–ü–æ–º–æ—â—å')
keyword.add(button_user_link, button_help)

HELLO = f'ü§ñ–Ø –¢–µ–ª–µ–≥—Ä–∞–º-–ë–æ—Ç!\n–Ø –º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–æ–≤–∞—Ä.\n' \
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –¥–æ 10 —Å—Å—ã–ª–æ–∫' \
        f'üíå–Ø —Å–æ–æ–±—â—É –≤–∞–º –µ—Å–ª–∏:\n' \
        f'   ‚ù§—Ü–µ–Ω–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è.\n' \
        f'   ‚ù§—Ç–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω\n' \
        f'   ‚ù§—Ç–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –¥–æ—Ç—Å—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ\n'\
        f'–í–∞—à–∏ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üõç–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"\n\n'


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        await bot.send_photo(message.from_user.id, photo='https://setemonic.ru/wp-content/uploads/c/2/2/c221894c8c4cae57e76286f759e01e72.jpeg',
                             caption=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
                                     f'{HELLO}<i>–° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mixalych06</i>',
                             parse_mode='HTML', reply_markup=keyword)
        db.add_user(message.from_user.id)
    else:
        await bot.send_photo(message.from_user.id, photo='https://setemonic.ru/wp-content/uploads/c/2/2/c221894c8c4cae57e76286f759e01e72.jpeg',
                             caption=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
                                     f'{HELLO}<i>–° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mixalych06</i>',
                             parse_mode='HTML', reply_markup=keyword)



@dp.message_handler(text='üÜò–ü–æ–º–æ—â—å')
async def command_help(message: types.Message):
    await bot.send_photo(message.from_user.id, photo='https://setemonic.ru/wp-content/uploads/c/2/2/c221894c8c4cae57e76286f759e01e72.jpeg',
                         caption=f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n'
                                     f'{HELLO}<i>–° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mixalych06</i>',
                         parse_mode='HTML', reply_markup=keyword)

@dp.callback_query_handler(lambda x: x.data.startswith('del'))
async def del_product(callback_query: types.CallbackQuery):
    inlaine_command = callback_query.data.split('|')
    db.del_product_bd((int(inlaine_command[1]), int(inlaine_command[2])))
    await callback_query.answer(text=f'{inlaine_command[3]}....\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.\n –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–∞–∂–º–∏—Ç–µ\nüõç–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', show_alert=True)



@dp.message_handler(text='üõç–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã')
async def user_product(message: types.Message):
    all_prod = db.all_product_in_user(message.from_user.id)
    if all_prod:
        for entries in all_prod:
            try:
                if entries[8] == 1:
                    await bot.send_photo(message.from_user.id, photo=entries[6],
                                         caption=f'<b>{entries[2]}</b>\n\n<b>–û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[3])//100} —Ä—É–±.</i>\n'
                                                 f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[4])//100} —Ä—É–±.</i>\n'
                                                 f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[5])//100} —Ä—É–±.</i>\n{entries[7]}', parse_mode='HTML',
                                         reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                                             '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å',callback_data=f"del|{message.from_user.id}|{entries[1]}|{entries[2][:10]}")))
                else:
                    await bot.send_photo(message.from_user.id, photo=entries[6],
                                         caption=f'<b>{entries[2]}</b>\n\n<b>–û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[3]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[4]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>  <i>–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞</i>\n{entries[7]}', parse_mode='HTML',
                                         reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                                             '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', callback_data=f"del|{message.from_user.id}|{entries[1]}|{entries[2][:10]}")))
            except aiogram.utils.exceptions.BadRequest:
                if entries[8] == 1:
                    await bot.send_photo(message.from_user.id, photo='https://cs.pikabu.ru/post_img/2013/04/06/6/1365237582_329952055.jpg',
                                         caption=f'–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞–∂–º–∏—Ç–µ –Ω–µ –∫–Ω–æ–ø–∫—É –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ—ë –µ—â—ë —Ä–∞–∑'
                                                 f'<b>{entries[2]}</b>\n\n<b>–û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[3]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[4]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[5]) // 100} —Ä—É–±.</i>\n{entries[7]}', parse_mode='HTML',
                                         reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                                             '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', callback_data=f"del|{message.from_user.id}|{entries[1]}|{entries[2][:10]}")))
                else:
                    await bot.send_photo(message.from_user.id, photo='https://cs.pikabu.ru/post_img/2013/04/06/6/1365237582_329952055.jpg',
                                         caption=f'<b>{entries[2]}</b>\n\n<b>–û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[3]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{int(entries[4]) // 100} —Ä—É–±.</i>\n'
                                                 f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>  <i>–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞</i>\n{entries[7]}', parse_mode='HTML',
                                         reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(
                                             '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å', callback_data=f"del|{message.from_user.id}|{entries[1]}|{entries[2][:10]}")))
                continue
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫')




@dp.message_handler()
async def echo_send(message: types.Message):
    e = message.text
    all_prod = db.all_product_in_user(message.from_user.id)
    if e.startswith('https://www.wildberries.ru') and 'detail.aspx' in e:
        x = all_pars(e)
        if db.select_user_prod(message.from_user.id, x['id']):
            await message.reply(choice(['–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è', '–Ø —É–∂–µ —Å–ª–µ–∂—É –¥–ª—è –í–∞—Å –∑–∞ —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º',
                                     '–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â—É –í–∞–º –æ–± —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ü–µ–Ω—ã']))
            return
        elif all_prod != False and len(all_prod)>9:
            await message.reply('–Ø –Ω–µ —É–º–µ—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –±–æ–ª–µ–µ 10 —Å—Å—ã–ª–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n'
                                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏')
            return
        else:
            await bot.send_photo(message.from_user.id, photo=x['link_photo'],
                                 caption=f'<b>{x["name"]}</b>\n\n<b>–û–±—â–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{x["salePriceU"] // 100} —Ä—É–±.</i>\n'
                                         f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b>  <i>{x["salePriceU"] // 100} —Ä—É–±.</i>\n'
                                         f'<b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b>  <i>{x["salePriceU"] // 100} —Ä—É–±.\n{x["link"]}</i>', reply_markup=keyword, parse_mode='HTML')
            db.add_product(message.from_user.id, x)
            return
    elif e.startswith('https://www.wildberries.ru') and not ('detail.aspx' in e):
        await message.reply('–ù–µ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞')
        return
    elif e.startswith('https://www.ozon.ru'):
        await message.reply('–≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –û–∑–æ–Ω, —è –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å.')
        return
    else:
        await message.answer(choice(['–ö–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —è –Ω–∞—É—á—É—Å—å –ø–æ–Ω–∏–º–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫ –∏ –º—ã —Å –≤–∞–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º.', '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é',
                                     '–≠-–≠–•, –º–Ω–µ –±—ã —Å—Å—ã–ª–æ—á–∫—É –Ω–∞ Wildberries']))
        return


async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        users_list = db.select_users()
        for user in users_list:
            user_prod = db.all_product_in_user(user[0])
            if user_prod:
                for prod in user_prod:
                    try:
                        if prod[8]:
                            new_pars_produkt = parsing_evry_day(prod[7])
                        else:
                            new_pars_produkt = parsing_evry_day(prod[7])
                            await bot.send_message(user[0], text=f'{prod[2]}\n–°–Ω–æ–≤–∞ –≤ –ø—Ä–æ–¥–∞–∂–µ')
                            db.changes_product_valye(prod[0], prod[1], 1)

                    except IndexError:
                        if prod[8]:
                            await bot.send_message(user[0], text=f'{prod[2]}\n–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
                            db.changes_product_valye(prod[0], prod[1], 0)

                    try:
                        if prod[8]:
                            if new_pars_produkt['salePriceU'] < prod[3] and new_pars_produkt['salePriceU'] < prod[4]:
                                '''—à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã–± –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª–∫—É –∏ —Ç–µ–∫—É—â—É—é'''
                                await bot.send_message(user[0], text=f'{prod[2]}\n–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞.\n–ú–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞ '
                                                                     f'{int(100 - ((new_pars_produkt["salePriceU"]//100) * 100 / (int(prod[3])//100)))}%\n'
                                                                     f'–¶–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—èü§ë —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.')
                                db.changes_product_data((new_pars_produkt['salePriceU'], new_pars_produkt['salePriceU'], prod[0], prod[1]))
                                sleep(1)
                                continue
                            elif new_pars_produkt['salePriceU'] < prod[5] and new_pars_produkt['salePriceU'] >= prod[4] and new_pars_produkt['salePriceU'] < prod[3]:
                                '''—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é'''
                                await bot.send_message(user[0], text=f'{prod[2]}\n–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞.\n–ú–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞'
                                                                     f'{int(100 - ((new_pars_produkt["salePriceU"] // 100) * 100 / (int(prod[3]) // 100)))}%\n')
                                db.changes_product_data((prod[4], new_pars_produkt['salePriceU'], prod[0], prod[1]))
                                sleep(1)
                                continue
                            else:
                                db.changes_product_data((prod[4], new_pars_produkt['salePriceU'], prod[0], prod[1]))
                                await bot.send_message(user[0], text='hfg')
                    except:
                        print('hjg')

                        db.off_user(prod[0])
            else:

                continue

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(10))
    executor.start_polling(dp, skip_updates=True)
